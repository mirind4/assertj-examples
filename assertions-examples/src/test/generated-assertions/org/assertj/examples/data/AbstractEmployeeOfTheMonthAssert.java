package org.assertj.examples.data;

import org.assertj.core.util.Objects;

/**
 * Abstract base class for {@link EmployeeOfTheMonth} specific assertions - Generated by CustomAssertionGenerator.
 */
@javax.annotation.Generated(value="assertj-assertions-generator")
public abstract class AbstractEmployeeOfTheMonthAssert<S extends AbstractEmployeeOfTheMonthAssert<S, A>, A extends EmployeeOfTheMonth> extends AbstractPersonAssert<S, A> {

  /**
   * Creates a new <code>{@link AbstractEmployeeOfTheMonthAssert}</code> to make assertions on actual EmployeeOfTheMonth.
   * @param actual the EmployeeOfTheMonth we want to make assertions on.
   */
  protected AbstractEmployeeOfTheMonthAssert(A actual, Class<S> selfType) {
    super(actual, selfType);
  }

  /**
   * Verifies that the actual EmployeeOfTheMonth's month is equal to the given one.
   * @param month the given month to compare the actual EmployeeOfTheMonth's month to.
   * @return this assertion object.
   * @throws AssertionError - if the actual EmployeeOfTheMonth's month is not equal to the given one.
   */
  public S hasMonth(String month) {
    // check that actual EmployeeOfTheMonth we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting month of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    String actualMonth = org.assertj.core.util.introspection.FieldSupport.EXTRACTION.fieldValue("month", String.class, actual);
    if (!Objects.areEqual(actualMonth, month)) {
      failWithMessage(assertjErrorMessage, actual, month, actualMonth);
    }

    // return the current assertion for method chaining
    return myself;
  }

}
